<%= disclaimer() %>
package <%= ns %>.client.widget;

import <%= ns %>.client.element.*;
<% if (hasEvents()) { %>
import <%= ns %>.client.widget.event.*;
<% } %>
import com.vaadin.components.gwt.polymer.client.PolymerWidget;
import com.vaadin.components.gwt.polymer.client.webapi.*;
import com.google.gwt.core.client.JsArray;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.core.client.JavaScriptObject;


/**
 * <%= getDescription(' ') %>
 */
public class <%= className() %> extends <%= baseWidgetName() %> {
    /**
     * Default Constructor.
     */
    public <%= className() %>() {
       this("");
    }

    /**
     * Constructor used by UIBinder to create widgets with content.
     */
    public <%= className() %>(String html) {
        this(<%= elementClassName() %>.TAG, html);
    }

    /**
     * Used when this element is extended by another.
     */
    protected <%= className() %>(String tag, String html) {
        super(tag, html);
<% if (hasEvents()) _.forEach(events, function(event){ %>
        getPolymerElement().addEventListener(
                <%= ns %>.client.element.event.<%= camelCase(event.name) %>Event.NAME,
                new <%= ns %>.client.element.event.<%= camelCase(event.name) %>Event.Listener() {
            @Override
            protected void handleEvent(<%= ns %>.client.element.event.<%= camelCase(event.name) %>Event event) {
                fireEvent(new <%= camelCase(event.name) %>Event(event));
            }
        });
<% }); %>
    }

    /**
     * Gets a handle to the Polymer object's underlying DOM element.
     */
    public <%= elementClassName() %> getPolymerElement() {
        return (<%= elementClassName() %>) getElement();
    }

<% if (hasAttributes()) _.forEach(attributes, function(attribute){ %>
    /**
     * <%= getDescription('     ', attribute) %>
     *
     * JavaScript Info:
     * @attribute <%= attribute.name %>
     * @type <%= attribute.type %>
     */
    public <%= computeType(attribute.type) %> <%= computeGetterWithPrefix(attribute) %>() {
        return getPolymerElement().<%= computeGetterWithPrefix(attribute) %>();
    }
    public void <%= computeSetterWithPrefix(attribute) %>(<%= computeType(attribute.type) %> value) {
        // getElement().setPropertyObject("<%= attribute.name %>", value);
        getElement().setAttribute("<%= attribute.name %>", String.valueOf(value));
    }
    <%= extraSetter(attribute) %>
<% }); %>
<% if (hasProperties()) _.forEach(properties, function(item){ %>
  <% if (item.type != 'Function') { %>
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @property <%= item.name %>
     * @type <%= item.type %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    public <%= computeType(item.type) %> <%= computeGetterWithPrefix(item) %>(){
        return getPolymerElement().<%= computeGetterWithPrefix(item) %>();
    }
    public void <%= computeSetterWithPrefix(item) %>(<%= computeType(item.type) %> value) {
        getPolymerElement().<%= computeSetterWithPrefix(item) %>(value);
    }
  <% } else { %>
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @method <%= item.name %><% if (!!item.params) _.forEach(item.params, function(param) { %>
     * @param {<%= param.type %>} <%= param.name %> <%= param.description %> <% }); %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    public void <%= item.name %>(<%= typedParamsString(item) %>) {
        getPolymerElement().<%= item.name %>(<%= paramsString(item) %>);
    }
  <% } %>
<% }); %>
<% if (hasEvents()) _.forEach(events, function(event){ %>
    /**
     * <%= getDescription('     ', event) %>
     *
     * JavaScript Info:
     * @event <%= event.name %>     
     */
    public HandlerRegistration add<%= camelCase(event.name) %>Handler(<%= camelCase(event.name) %>EventHandler handler) {
        return addHandler(handler, <%= camelCase(event.name) %>Event.TYPE);
    }
<% }); %>
}
